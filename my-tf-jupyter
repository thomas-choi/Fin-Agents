# Inherit from the specified NVIDIA TensorFlow base image
FROM nvcr.io/nvidia/tensorflow:24.09-tf2-py3

# Set environment variables for user configuration
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG USER_NAME=user

# Create a non-root user and group with specified UID/GID
RUN groupadd -g ${GROUP_ID} ${USER_NAME} && \
    useradd -m -u ${USER_ID} -g ${GROUP_ID} -s /bin/bash ${USER_NAME}

# Set the working directory in the container
WORKDIR /workdir

# Copy the requirements.txt file from the local project folder
COPY --chown=${USER_NAME}:${USER_NAME} requirements_docker.txt .

# Install Python packages from requirements.txt globally as root
# RUN if [ -f requirements_docker.txt ]; then pip install --no-cache-dir -r requirements_docker.txt; fi
RUN pip install --no-cache-dir -r requirements_docker.txt

# Update PATH to include user's local bin directory
ENV PATH="/home/${USER_NAME}/.local/bin:${PATH}"

# Expose the default Jupyter Notebook port
EXPOSE 8888

# Switch to the non-root user
USER ${USER_NAME}

# Set the command to run Jupyter Notebook in /workdir, binding to all interfaces
CMD ["/bin/bash", "-c", "jupyter notebook --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=/workdir"]

# docker build --no-cache --build-arg USER_ID=$(id -u) --build-arg GROUP_ID=$(id -g) -f my-tf-jupyter -t my-tf-jupyter .
# RUN a jupyter notebook
# docker run --rm -it --ip=192.168.11.102 --network=host --gpus all -v $(pwd):/workdir -p 8888:8888 my-tf-jupyter
# RUN a bash 
# docker run --rm -it --gpus all -v $(pwd):/workdir --network=host -p 8888:8888 my-tf-jupyter /bin/bash
# jupyter lab --ip=192.168.11.102 --network=host --port=8888 --no-browser --notebook-dir=/workdir
# jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --notebook-dir=/workdir